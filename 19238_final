#include<stdio.h>
#include<queue>

using namespace std;

typedef struct {
	int startx;
	int starty;
	int endx;
	int endy;
}person;

typedef struct {
	int x;
	int y;
	int len;
}d;

bool check[410];
person p[410];

int n, m, f;
int pcount = 0;
int startx, starty;
int xdir[4] = { 1,-1,0,0 };
int ydir[4] = { 0,0,1,-1 };
int insert[25][25];

int findperson(void) {

	int result = -1;
	int resultlen = 10000000;
	bool visited[25][25] = { false };
	queue<d> q;

	visited[startx][starty] = true;
	q.push({ startx,starty,0 });

	while (q.empty() != true) {
		int curx = q.front().x;
		int cury = q.front().y;
		int curlen = q.front().len;
		q.pop();

		if (insert[curx][cury] >= 1) {
			if (curlen < resultlen) {
				result = insert[curx][cury];
				resultlen = curlen;
			}
			else if (curlen == resultlen) {
				if (p[result].startx == p[insert[curx][cury]].startx) {
					if (p[result].starty > p[insert[curx][cury]].starty) {
						result = insert[curx][cury];
						resultlen = curlen;
					}
				}
				else if (p[result].startx > p[insert[curx][cury]].startx) {
					result = insert[curx][cury];
					resultlen = curlen;
				}
			}
		}

		for (int i = 0; i < 4; i++) {
			int newx = curx + xdir[i];
			int newy = cury + ydir[i];

			if (newx >= 1 && newy >= 1 && newx <= n && newy <= n) {
				if (insert[newx][newy] != -1 && visited[newx][newy] == false) {
					q.push({ newx,newy,curlen + 1 });
					visited[newx][newy] = true;
				}
			}
		}
	}

	if (result == -1) {
		return -1;
	}

	f -= resultlen;
	if (f < 0) {
		return -1;
	}

	return result;
}

int findway(int nearest) {
	bool visited[25][25] = { false };
	queue<d> q;

	visited[p[nearest].startx][p[nearest].starty] = true;
	q.push({ p[nearest].startx,p[nearest].starty,0 });

	while (q.empty() != true) {
		int curx = q.front().x;
		int cury = q.front().y;
		int curlen = q.front().len;
		q.pop();

		if (curx == p[nearest].endx&&cury == p[nearest].endy) {
			f -= curlen;
			if (f < 0) {
				return -1;
			}

			f += (2 * curlen);
			return 1;
		}

		for (int i = 0; i < 4; i++) {
			int newx = curx + xdir[i];
			int newy = cury + ydir[i];

			if (newx >= 1 && newy >= 1 && newx <= n && newy <= n) {
				if (insert[newx][newy] != -1 && visited[newx][newy] == false) {
					q.push({ newx,newy,curlen + 1 });
					visited[newx][newy] = true;
				}
			}
		}
	}

	return -1;
}

int main(void) {

	scanf("%d %d %d", &n, &m, &f);

	pcount = m;

	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= n; j++) {
			scanf("%d", &insert[i][j]);
			if (insert[i][j] == 1) {
				insert[i][j] = -1;
			}
		}
	}

	scanf("%d %d", &startx, &starty);

	for (int i = 1; i <= m; i++) {
		int x1, y1;
		int x2, y2;
		scanf("%d %d %d %d", &x1, &y1, &x2, &y2);

		p[i].startx = x1;
		p[i].starty = y1;
		p[i].endx = x2;
		p[i].endy = y2;
		insert[p[i].startx][p[i].starty] = i;
	}

	while (1) {
		/*for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= n; j++) {
				printf("%d ", insert[i][j]);
			}
			printf("\n");
		}*/

		int nearest = findperson();
		if (nearest == -1) {
			printf("-1\n");
			break;
		}

		//printf("nearest : %d, startx : %d, starty : %d, endx : %d, endy : %d\n", nearest, p[nearest].startx, p[nearest].starty, p[nearest].endx, p[nearest].endy);
		//printf("first f : %d\n", f);

		int nearlen = findway(nearest);

		if (nearlen == -1) {
			printf("-1\n");
			break;
		}

		//printf("second f : %d\n", f);

		insert[p[nearest].startx][p[nearest].starty] = 0;
		startx = p[nearest].endx;
		starty = p[nearest].endy;

		pcount--;

		if (pcount == 0) {
			printf("%d\n", f);
			break;
		}
	}

	return 0;
}