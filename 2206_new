#include<stdio.h>
#include<queue>

using namespace std;

typedef struct {
	int x;
	int y;
	int count;
}input;

int insert[1010][1010];
int result[1010][1010][2];
int n, m;
int xdir[4] = { 1,-1,0,0 };
int ydir[4] = { 0,0,1,-1 };

queue<input> q;

int bfs(void){

	while (q.empty() != true) {
		int x = q.front().x;
		int y = q.front().y;
		int count = q.front().count;
		q.pop();

		if (x == n - 1 && y == m - 1) {
			return result[x][y][count];
		}

		for (int i = 0; i < 4; i++) {
			int cur_x = x + xdir[i];
			int cur_y = y + ydir[i];

			if (cur_x >= 0 && cur_y >= 0 && cur_x < n&&cur_y < m) {
				if (insert[cur_x][cur_y] == 1 && count == 0 && result[cur_x][cur_y][count+1] == 0) {
					q.push({ cur_x,cur_y,count + 1 });
					result[cur_x][cur_y][count + 1] = result[x][y][count] + 1;
				}
				else if (insert[cur_x][cur_y] == 0 && result[cur_x][cur_y][count] == 0) {
					q.push({ cur_x,cur_y,count });
					result[cur_x][cur_y][count] = result[x][y][count] + 1;
				}
			}
		}
	}

	return -1;
}

int main(void) {

	scanf("%d %d", &n, &m);

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			scanf("%1d", &insert[i][j]);
		}
	}

	q.push({ 0,0,0 });
	result[0][0][0] = 1;
	result[0][0][1] = 1;

	printf("%d\n", bfs());

	return 0;
}