#include<stdio.h>
#include<vector>
#include<queue>
#include<algorithm>

using namespace std;

typedef struct {
	int start;
	int end;
}input;

vector <input> insert;
int n;
int m;
int v;

bool dfs_check[1010];
bool bfs_check[1010];

bool inc(input a, input b) {
	if (a.start == b.start) {
		return a.end < b.end;
	}

	return a.start < b.start;
}

void bfs(void) {
	queue <int> q;

	q.push(v);
	bfs_check[v] = true;

	while (q.empty() != true) {
		int cur = q.front();
		q.pop();
		printf("%d ", cur);

		for (int i = 0; i < insert.size(); i++) {
			if (insert[i].start == cur && bfs_check[insert[i].end] == false) {
				bfs_check[insert[i].end] = true;
				q.push(insert[i].end);
			}
		}
	}

	printf("\n");
}

void dfs(int cur) {
	dfs_check[cur] = true;
	printf("%d ", cur);

	for (int i = 0; i < insert.size(); i++) {
		if (insert[i].start == cur && dfs_check[insert[i].end] == false) {
			dfs(insert[i].end);
		}
	}

	return;
}

int main(void) {

	scanf("%d %d %d", &n, &m, &v);

	for (int i = 0; i < m; i++) {
		int insert1, insert2;

		scanf("%d %d", &insert1, &insert2);

		insert.push_back({ insert1,insert2 });
		insert.push_back({ insert2,insert1 });
	}

	sort(insert.begin(), insert.end(), inc);

	dfs(v);
	printf("\n");
	bfs();
	
	return 0;
}