/////////////////////////////////////////////////////////////////////////////////////////////
// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의
// 아래 표준 입출력 예제 필요시 참고하세요.
// 표준 입력 예제
// int a;
// float b, c;
// double d, e, f;
// char g;
// char var[256];
// long long AB;
// scanf("%d", &a);                      // int 변수 1개 입력받는 예제
// scanf("%f %f", &b, &c);               // float 변수 2개 입력받는 예제 
// scanf("%lf %lf %lf", &d, &e, &f);     // double 변수 3개 입력받는 예제
// scanf("%c", &g);                      // char 변수 1개 입력받는 예제
// scanf("%s", &var);                    // 문자열 1개 입력받는 예제
// scanf("%lld", &AB);                   // long long 변수 1개 입력받는 예제
/////////////////////////////////////////////////////////////////////////////////////////////
// 표준 출력 예제
// int a = 0;                            
// float b = 1.0, c = 2.0;               
// double d = 3.0, e = 0.0; f = 1.0;
// char g = 'b';
// char var[256] = "ABCDEFG";
// long long AB = 12345678901234567L;
// printf("%d", a);                      // int 변수 1개 출력하는 예제
// printf("%f %f", b, c);                // float 변수 2개 출력하는 예제
// printf("%lf %lf %lf", d, e, f);       // double 변수 3개 출력하는 예제
// printf("%c", g);                      // char 변수 1개 출력하는 예제
// printf("%s", var);                    // 문자열 1개 출력하는 예제
// printf("%lld", AB);                   // long long 변수 1개 출력하는 예제
/////////////////////////////////////////////////////////////////////////////////////////////
#include <stdio.h>
#include<stdbool.h>

int n;
int insert[25][25];
bool check[110];
int save[25][2];
int startx;
int starty;
int result = -1;

void dfs(int x, int y, int count, int dir) {

	//printf("x : %d, y : %d, count : %d, dir : %d\n", x, y, count, dir);

	//printf("insert : %d, check1 : %d\n", insert[x + 1][y + 1],check[insert[x + 1][y + 1]]);

	//printf("insert : %d, check2 : %d\n", insert[x + 1][y - 1],check[insert[x + 1][y - 1]]);

	//printf("insert : %d, check3 : %d\n", insert[x - 1][y - 1],check[insert[x - 1][y - 1]]);

	//printf("insert : %d, check4 : %d\n", insert[x - 1][y + 1],check[insert[x - 1][y + 1]]);

	if (count > 1 && x == startx && y == starty) {
		//printf("count : %d\n", count - 1);
		/*for (int i = 0; i < count; i++) {
			printf("%dth : x : %d, y : %d, dessert : %d\n", i, save[i][0], save[i][1], insert[save[i][0]][save[i][1]]);
		}*/
		if (count-1 > result) {
			//printf("count : %d, result : %d\n", count - 1, result);
			result = count - 1;
		}
		//printf("\n");

		return;
	}

	if (dir == 0) {
		if (x + 1 < n&&y + 1 < n-1&&check[insert[x + 1][y + 1]] == false){
			check[insert[x + 1][y + 1]] = true;
			save[count][0] = x + 1;
			save[count][1] = y + 1;
			dfs(x + 1, y + 1, count + 1, 0);
			check[insert[x + 1][y + 1]] = false;
		}
		if (count > 1 && x + 1 < n&&y - 1 >= 0 &&check[insert[x + 1][y - 1]] == false) {
			check[insert[x + 1][y - 1]] = true;
			save[count][0] = x + 1;
			save[count][1] = y - 1;
			dfs(x + 1, y - 1, count + 1, 1);
			check[insert[x + 1][y - 1]] = false;
		}
	}
	else if (dir == 1) {
		if (x + 1 < n&&y - 1 >= 0 &&check[insert[x + 1][y - 1]] == false) {
			check[insert[x + 1][y - 1]] = true;
			save[count][0] = x + 1;
			save[count][1] = y - 1;
			dfs(x + 1, y - 1, count + 1, 1);
			check[insert[x + 1][y - 1]] = false;
		}

		if (x - 1 >= 0&&y - 1 >= 0 &&check[insert[x - 1][y - 1]] == false) {
			check[insert[x - 1][y - 1]] = true;
			save[count][0] = x - 1;
			save[count][1] = y - 1;
			dfs(x - 1, y - 1, count + 1, 2);
			check[insert[x - 1][y - 1]] = false;
		}
	}
	else if (dir == 2) {
		if (x - 1 >= 0 && y - 1 >= 0 &&check[insert[x - 1][y - 1]] == false) {
			check[insert[x - 1][y - 1]] = true;
			save[count][0] = x - 1;
			save[count][1] = y - 1;
			dfs(x - 1, y - 1, count + 1, 2);
			check[insert[x - 1][y - 1]] = false;
		}

		if (x - 1 == startx && y + 1 == starty) {
			save[count][0] = x - 1;
			save[count][1] = y + 1;
			dfs(x - 1, y + 1, count + 1, 3);
		}

		if (x - 1 >= 0 && y + 1 < n &&check[insert[x - 1][y + 1]] == false) {
			check[insert[x - 1][y + 1]] = true;
			save[count][0] = x - 1;
			save[count][1] = y + 1;
			dfs(x - 1, y + 1, count + 1, 3);
			check[insert[x - 1][y + 1]] = false;
		}
	}
	else if (dir == 3) {
		if (x - 1 == startx && y + 1 == starty) {
			save[count][0] = x - 1;
			save[count][1] = y + 1;
			dfs(x - 1, y + 1, count + 1, 3);
		}
		if (x - 1 >= 0 && y + 1 < n &&check[insert[x - 1][y + 1]] == false) {
			check[insert[x - 1][y + 1]] = true;
			save[count][0] = x - 1;
			save[count][1] = y + 1;
			dfs(x - 1, y + 1, count + 1, 3);
			check[insert[x - 1][y + 1]] = false;
		}
	}
}

int main(void)
{
	int test_case;
	int T;
	/* 아래의 freopen 함수는 input.txt 를 read only 형식으로 연 후,
	앞으로 표준 입력(키보드) 대신 input.txt 파일로부터 읽어오겠다는 의미의 코드입니다.
	여러분이 작성한 코드를 테스트 할 때, 편의를 위해서 input.txt에 입력을 저장한 후,
	freopen 함수를 이용하면 이후 scanf 를 수행할 때 표준 입력 대신 파일로부터 입력을 받아올 수 있습니다.
	따라서 테스트를 수행할 때에는 아래 주석을 지우고 이 함수를 사용하셔도 좋습니다.
	단, 채점을 위해 코드를 제출하실 때에는 반드시 freopen 함수를 지우거나 주석 처리 하셔야 합니다.
	*/
	// freopen("input.txt", "r", stdin);
	/* 아래 코드를 수행하지 않으면 여러분의 프로그램이 제한 시간 초과로 강제 종료 되었을 때,
	출력한 내용이 실제 표준 출력에 기록되지 않을 수 있습니다.
	따라서 안전을 위해 반드시 setbuf(stdout, NULL); 을 수행하시기 바랍니다.
	*/
	setbuf(stdout, NULL);
	scanf("%d", &T);
	/*
	여러 개의 테스트 케이스를 처리하기 위한 부분입니다.
	*/
	for (test_case = 1; test_case <= T; ++test_case)
	{
		result = -1;

		scanf("%d", &n);

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				scanf("%d", &insert[i][j]);
			}
		}

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				check[insert[i][j]] = true;
				startx = i;
				starty = j;
				save[0][0] = i;
				save[0][1] = j;
				dfs(i, j, 1, 0);
				check[insert[i][j]] = false;
				//printf("new x y \n");
				for (int t = 0; t < 110; t++) {
					printf("%d ", check[i]);
				}
				printf("\n");
			}
		}

		printf("#%d %d\n", test_case, result);
	}
	return 0; //정상종료시 반드시 0을 리턴해야 합니다.
}