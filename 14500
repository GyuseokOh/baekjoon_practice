#include<stdio.h>
#include<algorithm>

using namespace std;

int n, m;
int insert[510][510];
bool check[510][510];
int result = 0;
int xdir[4] = { 1,-1,0,0 };
int ydir[4] = { 0,0,1,-1 };

void dfs(int x, int y, int count, int sum) {

	if (count == 4) {
		result = max(result, sum);

		return;
	}

	for (int i = 0; i < 4; i++) {
		int newx = x + xdir[i];
		int newy = y + ydir[i];

		if (newx >= 0 && newy >= 0 && newx < n&&newy < m&&check[newx][newy] == false) {
			check[newx][newy] = true;
			dfs(newx, newy, count + 1, sum + insert[newx][newy]);
			check[newx][newy] = false;
		}
	}
}

void tet(int x, int y) {
	int result1 = 0;
	int result2 = 0;

	if (x - 1 >= 0 && x + 1 < n&&y - 1 >= 0) {
		result2 = insert[x][y] + insert[x - 1][y] + insert[x + 1][y] + insert[x][y - 1];
		result1 = max(result1, result2);
	}

	if (x - 1 >= 0 && x + 1 < n&&y + 1 < m) {
		result2 = insert[x][y] + insert[x - 1][y] + insert[x + 1][y] + insert[x][y + 1];
		result1 = max(result1, result2);
	}

	if (y - 1 >= 0 && y + 1 < m&&x + 1 < n) {
		result2 = insert[x][y] + insert[x][y - 1] + insert[x][y + 1] + insert[x + 1][y];
		result1 = max(result1, result2);
	}

	if (y - 1 >= 0 && y + 1 < m&&x - 1 >= 0) {
		result2 = insert[x][y] + insert[x][y - 1] + insert[x][y + 1] + insert[x - 1][y];
		result1 = max(result1, result2);
	}

	result = max(result, result1);
}

int main(void) {

	scanf("%d %d", &n, &m);

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			scanf("%d", &insert[i][j]);
		}
	}

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			check[i][j] = true;
			dfs(i, j, 1, insert[i][j]);
			check[i][j] = false;
			tet(i, j);
		}
	}

	printf("%d\n", result);

	return 0;
}