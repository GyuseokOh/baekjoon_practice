#include<stdio.h>

typedef struct {
	int key;
}element;

typedef struct {
	element heap[200100];
	int heap_size;
}heaptype;

heaptype heap;

void push(element item) {
	int i = ++(heap.heap_size);

	while (i != 1 && item.key > heap.heap[i / 2].key) {
		heap.heap[i] = heap.heap[i / 2];
		i /= 2;
	}

	heap.heap[i] = item;
}

element pop(void) {
	int parent = 1;
	int child = 2;
	element target = heap.heap[1];
	element temp = heap.heap[heap.heap_size--];

	while (child <= heap.heap_size) {
		if (child < heap.heap_size&&heap.heap[child].key < heap.heap[child + 1].key) {
			child++;
		}

		if (temp.key >= heap.heap[child].key) {
			break;
		}

		heap.heap[parent] = heap.heap[child];
		parent = child;
		child *= 2;
	}

	heap.heap[parent] = temp;
	return target;
}

int main(void) {

	int n;

	scanf("%d", &n);

	while (n--) {
		int insert;
		scanf("%d", &insert);

		if (insert == 0) {
			if (heap.heap_size == 0) {
				printf("0\n");
			}
			else {
				element result = pop();
				printf("%d\n", result.key);
			}
		}
		else {
			element ins;
			ins.key = insert;
			push(ins);
		}
	}

	return 0;
}