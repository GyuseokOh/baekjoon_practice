#include<stdio.h>
#include<limits.h>
#include<queue>

using namespace std;

typedef struct {
	int x;
	int y;
	int insland;
}mp;

int n;
int result[110][110] = { 0 };
int map[110][110];
int x_dir[4] = { 1, -1,0,0 };
int y_dir[4] = { 0,0,1,-1 };
queue<mp> q;

void dfs(int x, int y, int count) {
	map[x][y] = count;

	for (int i = 0; i < 4; i++) {
		int new_x = x + x_dir[i];
		int new_y = y + y_dir[i];

		if (new_x >= 0 && new_y >= 0 && new_x < n && new_y < n) {
			if (map[new_x][new_y] == 1) {
				dfs(new_x, new_y, count);
			}
			else {
				q.push({ new_x,new_y,count });
			}
		}
	}
}

int bfs() {

	while (!q.empty()) {
		int cur_x = q.front().x;
		int cur_y = q.front().y;
		int cur_island = q.front().insland;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int new_x = cur_x + x_dir[i];
			int new_y = cur_y + y_dir[i];

			if (new_x >= 0 && new_y >= 0 && new_x < n && new_y < n) {
				if (map[new_x][new_y] != 0 && map[new_x][new_y] != cur_island) {
					while (q.empty() != true) {
						q.pop();
					}
					return result[cur_x][cur_y] + 1;
				}
				else if (map[new_x][new_y] == 0 && result[new_x][new_y] == 0) {
					result[new_x][new_y] = result[cur_x][cur_y] + 1;
					q.push({ new_x,new_y,cur_island });
				}
			}
		}
	}
	return INT_MAX;
}

int main(void) {

	int final_result = INT_MAX;
	int count = 2;

	scanf("%d", &n);

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			scanf("%d", &map[i][j]);
		}
	}

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (map[i][j] == 1) {
				dfs(i, j, count);
				int cur_result = bfs();
				if (cur_result < final_result) {
					final_result = cur_result;
				}

				for (int t = 0; t < n; t++) {
					for (int l = 0; l < n; l++) {
						result[t][l] = 0;
					}
				}
				count++;
			}
		}
	}

	printf("%d\n", final_result);

	return 0;
}