#include<stdio.h>
#include<vector>
#include<queue>

using namespace std;

int v, e;
int check[20010];
vector<int> insert[20010];
void bfs(int start) {

	queue<int>q;

	check[start] = 1;
	q.push({ start });

	while (q.empty() != true) {
		int cur = q.front();
		q.pop();

		for (int i = 0; i < insert[cur].size(); i++) {
			if (check[insert[cur][i]] == 0) {
				if (check[cur] == 1) {
					check[insert[cur][i]] = 2;
				}
				else {
					check[insert[cur][i]] = 1;
				}
				q.push(insert[cur][i]);
			}
		}
	}
}

bool validation(void) {

	for (int i = 1; i <= v; i++) {
		for (int j = 0; j < insert[i].size(); j++) {
			if (check[i] == check[insert[i][j]]) {
				return false;
			}
		}
	}

	return true;
}

int main(void) {
	
	int t;

	scanf("%d", &t);

	while (t--) {
		scanf("%d %d", &v, &e);

		for (int i = 0; i < e; i++){
			int insert1, insert2;

			scanf("%d %d", &insert1, &insert2);
			insert[insert1].push_back(insert2);
			insert[insert2].push_back(insert1);
		}

		for (int i = 1; i <= v; i++) {
			if (check[i] == 0) {
				bfs(i);
			}
		}

		if (validation() == true) {
			printf("YES\n");
		}
		else {
			printf("NO\n");
		}

		for (int i = 0; i <= v; i++) {
			check[i] = 0;
		}

		for (int i = 0; i < 20010; i++) {
			while (insert[i].empty() != true) {
				insert[i].pop_back();
			}
		}
	}

	return 0;
}