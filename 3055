#include<stdio.h>
#include<utility>
#include<queue>

using namespace std;

int r, c;
int map_check[55][55] = { 0, };
int x_dir[4] = { 0,0,1,-1 };
int y_dir[4] = { 1,-1,0,0 };

char map[55][55];

queue<pair<int, int>> map_q;
queue<pair<int, int>> q;

void map_flood(void) {
	int size = map_q.size();

	while (size--) {
		int cur_x = map_q.front().first;
		int cur_y = map_q.front().second;
		map_q.pop();

		for (int i = 0; i < 4; i++) {
			int new_x = cur_x + x_dir[i];
			int new_y = cur_y + y_dir[i];

			if (new_x >= 0 && new_y >= 0 && new_x < r && new_y < c) {
				if (map[new_x][new_y] == '.') {
					map[new_x][new_y] = '*';
					map_q.push({ new_x,new_y });
				}
			}
		}
	}
}

int bfs(int start_x, int start_y) {
	map_check[start_x][start_y] = 1;
	q.push({ start_x,start_y });

	while (q.empty() != true) {
		int size = q.size();
		map_flood();
		while (size--) {
			int cur_x = q.front().first;
			int cur_y = q.front().second;
			q.pop();

			for (int i = 0; i < 4; i++) {
				int new_x = cur_x + x_dir[i];
				int new_y = cur_y + y_dir[i];

				if (new_x >= 0 && new_y >= 0 && new_x < r && new_y < c) {
					if (map[new_x][new_y] == 'D') {
						return map_check[cur_x][cur_y];
					}
					else if(map[new_x][new_y] == '.' && map_check[new_x][new_y] == 0) {
						map_check[new_x][new_y] = map_check[cur_x][cur_y] + 1;
						q.push({ new_x,new_y });
					}
				}
			}
		}
	}
	return -1;
}

int main(void) {

	int result;

	scanf("%d %d", &r, &c);

	for (int i = 0; i < r; i++) {
		scanf("%s", map[i]);
	}

	for (int i = 0; i < r; i++) {
		for (int j = 0; j < c; j++) {
			if (map[i][j] == '*') {
				map_q.push({ i,j });
			}
		}
	}

	for (int i = 0; i < r; i++) {
		for (int j = 0; j < c; j++) {
			if (map[i][j] == 'S') {
				result = bfs(i, j);
				if (result == -1) {
					printf("KAKTUS\n");
					return 0;
				}
				else {
					printf("%d\n", result);
					return 0;
				}
			}
		}
	}

	return 0;
}