#include<stdio.h>
#include<vector>
#include<queue>

using namespace std;

struct input {
	int x;
	int y;
};

int n, m;
int result = 10000000;
int insert[55][55];
int xdir[4] = { 1,-1,0,0 };
int ydir[4] = { 0,0,1,-1 };
bool vcheck[2600];
vector<input>v;

int bfs(void) {

	queue<input>q;
	bool visited[55][55] = { false };
	int curinsert[55][55] = { 0, };
	int curresult = 0;

	for (int i = 0; i < v.size(); i++) {
		if (vcheck[i] == true) {
			q.push({ v[i].x,v[i].y });
			visited[v[i].x][v[i].y] = true;
		}
	}

	while (q.empty() != true) {
		int curx = q.front().x;
		int cury = q.front().y;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int newx = curx + xdir[i];
			int newy = cury + ydir[i];

			if (newx >= 0 && newy >= 0 && newx < n && newy < n) {
				if (visited[newx][newy] == false && (insert[newx][newy] == 0 || insert[newx][newy] == 2)) {
					q.push({ newx,newy });
					visited[newx][newy] = true;
					curinsert[newx][newy] = curinsert[curx][cury] + 1;
				}
			}
		}
	}

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (insert[i][j] == 0 || insert[i][j] == 2) {
				if (visited[i][j] == false) {
					return 10000000;
				}

				if (curresult < curinsert[i][j]) {
					curresult = curinsert[i][j];
				}
			}
		}
	}

	return curresult;
}

void dfs(int cur, int num) {
	if (num == 0) {

		int curresult = bfs();

		if (curresult < result) {
			result = curresult;
		}

		return;
	}

	if (cur == v.size()) {
		return;
	}

	vcheck[cur] = true;
	insert[v[cur].x][v[cur].y] = 3;
	dfs(cur + 1, num - 1);
	vcheck[cur] = false;
	insert[v[cur].x][v[cur].y] = 2;
	dfs(cur + 1, num);
}

int main(void) {

	scanf("%d %d", &n, &m);

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			scanf("%d", &insert[i][j]);

			if (insert[i][j] == 2) {
				v.push_back({ i,j });
			}
		}
	}

	dfs(0, m);

	if (result == 10000000) {
		result = -1;
	}

	printf("%d\n", result);

	return 0;
}