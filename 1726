#include<stdio.h>
#include<queue>

using namespace std;

typedef struct {
	int x;
	int y;
	int dir;
}rob;

int m, n;
int insert[110][110];
int result[110][110] = { 0, };
int x_dir[4] = { 0,0,1,-1 };
int y_dir[4] = { 1,-1,0,0 };
rob startp;
rob endp;
queue<rob> q;

int bfs(rob start) {

	q.push(start);
	result[start.x][start.y] = -1;

	while (!q.empty()) {
		int cur_x = q.front().x;
		int cur_y = q.front().y;
		int cur_dir = q.front().dir;
		printf("x : %d y: %d dir ; %d result: %d\n", cur_x, cur_y, cur_dir,result[cur_x][cur_y]);
		q.pop();

		if (cur_x == endp.x&&cur_y == endp.y) {
			printf("result x : %d y: %d dir ; %d\n", cur_x, cur_y, cur_dir);
			printf("end x: %d y : %d dir; %d\n", endp.x, endp.y, endp.dir);
			if (cur_dir == endp.dir) {
				return result[cur_x][cur_y];
			}
			else {
				if (endp.dir == 1) {
					if (cur_dir == 4||cur_dir==3) {
						return result[cur_x][cur_y] + 1;
					}
					else {
						return result[cur_x][cur_y] + 2;
					}
				}
				else if (endp.dir == 4) {
					if (cur_dir == 2 || cur_dir == 1) {
						return result[cur_x][cur_y] + 1;
					}
					else {
						return result[cur_x][cur_y] + 2;
					}
				}
				else if (endp.dir == 2) {
					if (cur_dir == 3 || cur_dir == 4) {
						return result[cur_x][cur_y] + 1;
					}
					else {
						return result[cur_x][cur_y] + 2;
					}
				}
				else {
					if (cur_dir == 1 || cur_dir == 2) {
						return result[cur_x][cur_y] + 1;
					}
					else {
						return result[cur_x][cur_y] + 2;
					}
				}
			}
		}

		for (int i = 0; i < 4; i++) {
			for (int k = 1; k <= 3; k++) {
				int new_x = cur_x + x_dir[i] * k;
				int new_y = cur_y + y_dir[i] * k;

				if (new_x >= 1 && new_y >= 1 && new_x <= m&&new_y <= n) {
					if (result[new_x][new_y] == 0&&insert[new_x][new_y]==0) {
						if (cur_dir == 1) {
							if (cur_dir == i+1) {
								result[new_x][new_y] = result[cur_x][cur_y] + 1;
								q.push({ new_x,new_y,cur_dir });
							}
							else if (i+1 == 3 || i+1 == 4) {
								result[new_x][new_y] = result[cur_x][cur_y] + 2;
								q.push({ new_x,new_y,i+1 });
							}
							else {
								result[new_x][new_y] = result[cur_x][cur_y] + 3;
								q.push({ new_x,new_y,i + 1 });
							}
						}
						else if (cur_dir == 2) {
							if (cur_dir == i + 1) {
								result[new_x][new_y] = result[cur_x][cur_y] + 1;
								q.push({ new_x,new_y,cur_dir });
							}
							else if (i + 1 == 3 || i + 1 == 4) {
								result[new_x][new_y] = result[cur_x][cur_y] + 2;
								q.push({ new_x,new_y,i + 1 });
							}
							else {
								result[new_x][new_y] = result[cur_x][cur_y] + 3;
								q.push({ new_x,new_y,i + 1 });
							}
						}
						else if (cur_dir == 3) {
							if (cur_dir == i + 1) {
								result[new_x][new_y] = result[cur_x][cur_y] + 1;
								q.push({ new_x,new_y,cur_dir });
							}
							else if (i + 1 == 1 || i + 1 == 2) {
								result[new_x][new_y] = result[cur_x][cur_y] + 2;
								q.push({ new_x,new_y,i + 1 });
							}
							else {
								result[new_x][new_y] = result[cur_x][cur_y] + 3;
								q.push({ new_x,new_y,i + 1 });
							}
						}
						else if(cur_dir==4){
							if (cur_dir == i + 1) {
								result[new_x][new_y] = result[cur_x][cur_y] + 1;
								q.push({ new_x,new_y,cur_dir });
							}
							else if (i + 1 == 1 || i + 1 == 2) {
								printf("cur : %d %d\n", cur_x, cur_y);
								printf("i :%d, k : %d, new_x : %d, new_y : %d\n", i + 1, k, new_x, new_y);
								result[new_x][new_y] = result[cur_x][cur_y] + 2;
								q.push({ new_x,new_y,i + 1 });
							}
							else {
								result[new_x][new_y] = result[cur_x][cur_y] + 3;
								q.push({ new_x,new_y,i + 1 });
							}
						}
					}
				}
			}
		}
	}

	return 01;
}

int main(void) {

	scanf("%d %d", &m, &n);

	for (int i = 1; i <= m; i++) {
		for (int j = 1; j <= n; j++) {
			scanf("%d", &insert[i][j]);
		}
	}

	scanf("%d %d %d", &startp.x, &startp.y, &startp.dir);
	scanf("%d %d %d", &endp.x, &endp.y, &endp.dir);

	printf("%d\n",bfs(startp)+1);

	for (int i = 1; i <= m; i++) {
		for (int j = 1; j <= n; j++) {
			printf("%d ", result[i][j]);
		}
		printf("\n");
	}

	return 0;
}