#include<stdio.h>
#include<deque>
#include<queue>

using namespace std;

typedef struct {
	int x;
	char c;
}dir;

typedef struct {
	int x;
	int y;
}snake;

int n, k, l;
int map[110][110];
int xdir[4] = { 1,-1,0,0 };
int ydir[4] = { 0,0,1,-1 };
bool check[110][110];
bool dircheck[110][110];
int time = 0;
int cur_dir = 0;
int x = 1;
int y = 1;
deque<snake> dq;
queue<dir> q;

int main(void) {

	scanf("%d", &n);
	scanf("%d", &k);

	for (int i = 0; i < k; i++) {
		int a, b;
		scanf("%d %d", &a, &b);
		map[a][b] = 1;
	}

	scanf("%d", &l);

	for (int i = 0; i < l; i++) {
		int x;
		char c;

		scanf("%d %c", &x, &c);
		q.push({ x,c });
	}

	check[1][1] = true;
	dq.push_front({ 1,1 });

	//printf("x : %d, y : %d, time : %d, dir : %d\n", x, y, time, cur_dir);

	while (1) {
		time++;

		if (cur_dir == 0) {
			y++;
		}
		else if (cur_dir == 1) {
			x++;
		}
		else if (cur_dir == 2) {
			y--;
		}
		else {
			x--;
		}

		//printf("x : %d, y : %d, time : %d, dir : %d\n", x, y, time, cur_dir);

		if (x<1 || y<1 || x>n || y>n) {
			break;
		}

		if (check[x][y] == true) {
			break;
		}

		if (map[x][y] == 1) {
			check[x][y] = true;
			dq.push_front({ x,y });
			map[x][y] = 0;
		}
		else if(map[x][y] == 0){
			check[x][y] = true;
			dq.push_front({ x,y });
			check[dq.back().x][dq.back().y] = false;
			dq.pop_back();
		}

		/*for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= n; j++) {
				printf("%d ", check[i][j]);
			}
			printf("\n");
		}*/

		if (q.empty()!=true && time == q.front().x) {
			if (q.front().c == 'D') {
				cur_dir++;
				cur_dir %= 4;
			}
			else {
				cur_dir--;
				if (cur_dir < 0) {
					cur_dir = 3;
				}
			}

			q.pop();
		}
	}

	printf("%d\n", time);

	return 0;
}