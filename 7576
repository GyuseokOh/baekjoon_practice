#include<stdio.h>
#include<queue>
#include<utility>

using namespace std;

int map[1010][1010];
int x_dir[4] = { 0,0,-1,1 };
int y_dir[4] = { -1,1,0,0 };

int main(void) {

	int n, m;
	int x, y;
	int sol_x = -1, sol_y = -1;
	int zero_count = 0;
	bool break_count = false;
	queue<pair<int, int>> q;

	scanf("%d %d", &m, &n);

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			scanf("%d", &map[i][j]);
			if (map[i][j] == 1) {
				q.push(pair<int, int>(i, j));
			}
			else if (map[i][j] == 0) {
				zero_count++;
			}
		}
	}

	while (q.empty() != true) {
		x = q.front().first;
		y = q.front().second;
		q.pop();

		for (int i = 0; i < 4; i++) {
			int cur_x = x + x_dir[i];
			int cur_y = y + y_dir[i];

			if (cur_x >= 0 && cur_y >= 0 && cur_x < n&&cur_y < m) {
				if (map[cur_x][cur_y] == 0) {
					map[cur_x][cur_y] = map[x][y] + 1;
					zero_count--;
					if (zero_count == 0) {
						sol_x = cur_x;
						sol_y = cur_y;

						break_count = true;
						break;
					}
					q.push(pair<int, int>(cur_x, cur_y));
				}
			}
		}

		if (break_count == true) {
			break;
		}
	}

	if (zero_count == 0) {
		if (sol_x == -1 && sol_y == -1) {
			printf("0\n");
		}
		else {
			printf("%d\n", map[sol_x][sol_y] - 1);

		}
	}
	else {
		printf("-1\n");
	}

	return 0;
}