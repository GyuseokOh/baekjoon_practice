#include<stdio.h>
#include<utility>
#include<queue>

using namespace std;

queue<pair<int, int>> q;
int map[110][110];

int main(void) {

	int n, m;
	int q_count = 1;
	int count = 1;

	scanf("%d %d", &n, &m);

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			scanf("%1d", &map[i][j]);
		}
	}

	q.push(pair<int,int>(0,0));
	map[0][0] = 0;

	while (!q.empty()) {
		int cur_q_count = 0;
		while (q_count != 0) {
			int cur_i = q.front().first;
			int cur_j = q.front().second;
			q.pop();

			if (cur_i == n - 1 && cur_j == m-1) {
				printf("%d\n", count);
				return 0;
			}

			if (cur_i != 0 && map[cur_i - 1][cur_j] == 1) {
				map[cur_i - 1][cur_j] = 0;
				q.push(pair<int, int>(cur_i - 1, cur_j));
				cur_q_count++;
			}
			if (cur_j != 0 && map[cur_i][cur_j - 1] == 1) {
				map[cur_i][cur_j - 1] = 0;
				q.push(pair<int, int>(cur_i, cur_j - 1));
				cur_q_count++;
			}
			if (cur_i != n - 1 && map[cur_i + 1][cur_j] == 1) {
				map[cur_i + 1][cur_j] = 0;
				q.push(pair<int, int>(cur_i + 1, cur_j));
				cur_q_count++;
			}
			if (cur_j != m - 1 && map[cur_i][cur_j + 1] == 1) {
				map[cur_i][cur_j + 1] = 0;
				q.push(pair<int, int>(cur_i, cur_j + 1));
				cur_q_count++;
			}

			q_count--;
		}

		q_count = cur_q_count;
		count++;
	}


	return 0;
}