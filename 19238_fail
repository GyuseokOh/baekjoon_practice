#include<stdio.h>
#include<queue>

using namespace std;

typedef struct {
	int x;
	int y;
}input;

typedef struct {
	int startx;
	int starty;
	int endx;
	int endy;
}person;

int n, m, f;
int startx, starty;
int insert[25][25];
person p[410];
bool check[410];
int xdir[4] = { 1,-1,0,0 };
int ydir[4] = { 0,0,-1,1 };

queue<input> q;

int main(void) {

	int eachlen[25][25] = { 0, };
	int endlen[25][25] = { 0, };
	int mcount;
	bool endflag = false;

	scanf("%d %d %d", &n, &m, &f);

	mcount = m;

	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= n; j++) {
			scanf("%d", &insert[i][j]);
		}
	}

	scanf("%d %d", &startx, &starty);

	for (int i = 1; i <= m; i++) {
		int x1, y1, x2, y2;
		scanf("%d %d %d %d", &x1, &y1, &x2, &y2);
		p[i].startx = x1;
		p[i].starty = y1;
		p[i].endx = x2;
		p[i].endy = y2;
	}

	while (1) {

		int minlen = 1000000;
		int pindex;
		int taxilen = -1;

		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= n; j++) {
				eachlen[i][j] = 0;
				endlen[i][j] = 0;
			}
		}

		//printf("first startx : %d, starty : %d\n", startx, starty);

		q.push({ startx,starty });

		while (q.empty() != true) {
			int curx = q.front().x;
			int cury = q.front().y;
			q.pop();

			for (int i = 0; i < 4; i++) {
				int newx = curx + xdir[i];
				int newy = cury + ydir[i];

				if (newx >= 1 && newy >= 1 && newx <= n && newy <= n) {
					//printf("newx  :%d, newy : %d\n", newx, newy);
					if (insert[newx][newy] == 0 && eachlen[newx][newy] == 0) {
						eachlen[newx][newy] = eachlen[curx][cury] + 1;
						q.push({ newx,newy });
					}
				}
			}
		}

		eachlen[startx][starty] = 0;

		/*for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= n; j++) {
				printf("%d ", eachlen[i][j]);
			}
			printf("\n");
		}*/

		for (int i = 1; i <= m; i++) {
			if (check[i] == false) {
				if (eachlen[p[i].startx][p[i].starty] < minlen) {
					minlen = eachlen[p[i].startx][p[i].starty];
					pindex = i;
				}
				else if (eachlen[p[i].startx][p[i].starty] == minlen) {
					if (p[i].startx == p[pindex].startx) {
						if (p[i].starty < p[pindex].starty) {
							pindex = i;
						}
					}
					else if (p[i].startx < p[pindex].startx) {
						pindex = i;
					}
				}
			}
		}

		check[pindex] = true;
		q.push({ p[pindex].startx,p[pindex].starty });

		while (q.empty() != true) {
			int curx = q.front().x;
			int cury = q.front().y;
			q.pop();

			//printf("curx : %d, cury : %d\n", curx, cury);

			if (curx == p[pindex].endx&&cury == p[pindex].endy) {
				while (q.empty() != true) {
					q.pop();
				}
				taxilen = endlen[curx][cury];
				break;
			}

			for (int i = 0; i < 4; i++) {
				int newx = curx + xdir[i];
				int newy = cury + ydir[i];

				if (newx >= 1 && newy >= 1 && newx <= n && newy <= n) {
					//printf("newx  :%d, newy : %d\n", newx, newy);
					if (insert[newx][newy] == 0 && endlen[newx][newy] == 0) {
						endlen[newx][newy] = endlen[curx][cury] + 1;
						q.push({ newx,newy });
					}
				}
			}
		}

		endlen[p[pindex].startx][p[pindex].starty] = 0;

		if (minlen == 0) {
			if (startx == p[pindex].startx&&starty == p[pindex].starty) {
				continue;
			}
			else {
				printf("-1\n");
				break;
			}
		}

		startx = p[pindex].endx;
		starty = p[pindex].endy;

		if (taxilen == -1) {
			printf("-1\n");
			break;
		}

		//printf("pindex : %d, startx : %d, starty : %d, endx  :%d, endy : %d\n", pindex, p[pindex].startx, p[pindex].starty, p[pindex].endx, p[pindex].endy);
		//printf("f : %d\n", f);
		//printf("minlen : %d\n", minlen);
		//printf("taxilen : %d\n", taxilen);

		if (f - (minlen + taxilen) < 0) {
			printf("-1\n");
			break;
		}
		else {
			mcount--;
			f -= minlen;
			f -= taxilen;
			f += (2 * taxilen);

			if (mcount == 0) {
				printf("%d\n", f);
				break;
			}
		}
	}

	return 0;
}