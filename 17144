#include<stdio.h>
#include<math.h>
#include<vector>
#include<queue>

using namespace std;

struct air {
	int x;
	int y;
};

struct dust {
	int x;
	int y;
	int num;
};

int r, c, t;
int result = 0;
air airt;
air airb;
int insert[55][55];
int xdir[4] = { 1,-1,0,0 };
int ydir[4] = { 0,0,1,-1 };
queue<dust> q;

int main(void) {

	airt.x = -1;

	scanf("%d %d %d", &r, &c, &t);

	for (int i = 0; i < r; i++) {
		for (int j = 0; j < c; j++) {
			scanf("%d", &insert[i][j]);
			if (insert[i][j] == -1) {
				if (airt.x == -1) {
					airt.x = i;
					airt.y = j;
				}
				else {
					airb.x = i;
					airb.y = j;
				}
			}
			else if (insert[i][j] > 0) {
				q.push({ i,j,insert[i][j] });
			}
		}
	}

	for (int p = 0; p < t; p++) {
		while (q.empty() != true) {
			int curx = q.front().x;
			int cury = q.front().y;
			int num = floor((double)q.front().num / 5);
			q.pop();

			for (int i = 0; i < 4; i++) {
				int newx = curx + xdir[i];
				int newy = cury + ydir[i];

				if (newx >= 0 && newy >= 0 && newx < r&&newy < c) {
					if (insert[newx][newy] != -1) {
						insert[newx][newy] += num;
						insert[curx][cury] -= num;
					}
				}
			}
		}

		for (int i = airt.x - 1; i > 0; i--) {
			insert[i][0] = insert[i - 1][0];
		}

		for (int j = 0; j < c - 1; j++) {
			insert[0][j] = insert[0][j + 1];
		}

		for (int i = 0; i < airt.x; i++) {
			insert[i][c - 1] = insert[i + 1][c - 1];
		}

		for (int j = c - 1; j > 1; j--) {
			insert[airt.x][j] = insert[airt.x][j - 1];
		}

		insert[airt.x][1] = 0;


		for (int i = airb.x + 1; i < r - 1; i++) {
			insert[i][0] = insert[i + 1][0];
		}

		for (int j = 0; j < c - 1; j++) {
			insert[r - 1][j] = insert[r - 1][j + 1];
		}

		for (int i = r - 1; i > airb.x; i--) {
			insert[i][c - 1] = insert[i - 1][c - 1];
		}

		for (int j = c - 1; j > 1; j--) {
			insert[airb.x][j] = insert[airb.x][j - 1];
		}

		insert[airb.x][1] = 0;

		for (int i = 0; i < r; i++) {
			for (int j = 0; j < c; j++) {
				if (insert[i][j] != 0) {
					if (insert[i][j] > 0) {
						q.push({ i,j,insert[i][j] });
						if (p == t - 1) {
							result += insert[i][j];
						}
					}
				}
			}
		}
	}

	printf("%d\n", result);

	return 0;
}