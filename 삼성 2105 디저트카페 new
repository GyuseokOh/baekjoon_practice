#include<stdio.h>
#include<iostream>
#include<algorithm>
#include<vector>

using namespace std;

int n;
int insert[25][25];
int check[4];
vector<int>v;
int startx;
int starty;
int result;

void dfs(int x, int y, int dir) {

	//printf("x : %d, y: %d, dir : %d\n", x, y, dir);
	if (x<0 || y<0 || x>=n || y>=n) {
		//printf("return1\n");
		return;
	}

	if (dir == 3 && x == startx && y == starty) {
		int cur = v.size();
		/*printf("startx : %d, starty : %d\n", startx, starty);
		printf("vector\n");
		for (int i = 0; i < v.size(); i++) {
			printf("%d ", v[i]);
		}

		printf("\ncur : %d, result : %d\n",cur,result);
		*/
		if (cur > result) {
			result = cur;
		}
		return;
	}

	for (int i = 0; i < v.size(); i++) {
		if (v[i] == insert[x][y]) {
			return;
		}
	}

	v.push_back(insert[x][y]);

	if (dir == 0) {
		if (check[0] == 0) {
			check[0]++;
			dfs(x + 1, y + 1, 0);
			check[0]--;
		}
		else {
			check[0]++;
			dfs(x + 1, y + 1, 0);
			check[0]--;
			check[1]++;
			dfs(x + 1, y - 1, 1);
			check[1]--;
		}
	}
	else if (dir == 1) {
		if (check[1] == 0) {
			check[1]++;
			dfs(x + 1, y - 1, 1);
			check[1]--;
		}
		else {
			check[1]++;
			dfs(x + 1, y - 1, 1);
			check[1]--;
			check[2]++;
			dfs(x - 1, y - 1, 2);
			check[2]--;
		}
	}
	else if (dir == 2) {
		if (check[2] == 0) {
			check[2]++;
			dfs(x - 1, y - 1, 2);
			check[2]--;
		}
		else {
			check[2]++;
			dfs(x - 1, y - 1, 2);
			check[2]--;
			check[3]++;
			dfs(x - 1, y + 1, 3);
			check[3]--;
		}
	}
	else if (dir == 3) {
		check[3]++;
		dfs(x - 1, y + 1, 3);
	}

	v.pop_back();
}

int main(void) {
	int T;
	scanf("%d", &T);

	for (int t_case = 1; t_case <= T; t_case++) {
		result = -1;
		scanf("%d", &n);

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				scanf("%d", &insert[i][j]);
			}
		}

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				for (int t = 0; t < 4; t++) {
					check[t] = 0;
				}
				startx = i;
				starty = j;
				dfs(i, j, 0);
			}
		}

		printf("#%d %d\n", t_case, result);
	}
	return 0;
}